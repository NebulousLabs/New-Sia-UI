// UI.js, the first renderer process, handles loading and transitioning between
// buttons and views. Pretty much all user interaction response should go
// through here.

// Elements used across this file. GCed after file execution
'use strict';
const WebFrame = require('web-frame');
const ElectronScreen = require('screen');
const Path = require('path');
const Fs = require('fs');
var Plugins = require('./js/pluginManager');

// config.json variables
var configPath = Path.join(__dirname, 'config.json');
var config;

// adjustZoom() makes the app more readable on high dpi screens. 
// TODO: Take better approach, resolution doesn't mean high dpi. Though
// supposedly there's not a sure-fire way to find dpi on all platforms.
function adjustHighResZoom() {
	// Calculated upon function call to get appropriate zoom (even if the
	// primary display were to change).
	var screenSize = ElectronScreen.getPrimaryDisplay().workAreaSize;
	var screenArea = screenSize.width * screenSize.height;
	if (screenArea >= 2048*1152) {
		config.zoom = 2;
		WebFrame.setZoomFactor(config.zoom);
	}
}

// saveConfig() writes the current config to defaultConfigPath
function saveConfig() {
	Fs.writeFile(configPath, JSON.stringify(config, null, '\t'), function(err) {
		if (err) {
			console.log(err);
		} 
	});
}

// getDefaultConfig() returns the default settings object
function getDefaultConfig() {
	return {
		appPath: __dirname,
		autogenerated: true,
		depsPath: Path.join(__dirname, 'dependencies'),
		homePlugin: 'Overview',
		pluginsPath: Path.join(__dirname, 'plugins'),
		siadAddress: 'http://localhost:9980',
		siadCommand: process.platform === 'win32' ? './siad.exe' : './siad',
		zoom: 1,
	};
}

// loadConfig() finds if a config file exists and uses default if not
function loadConfig(callback) {
	Fs.readFile(configPath, function(err, data) {
		if (err) {
			// no file found, use default config
			config = getDefaultConfig();	
		} else {
			// found config, use it
			config = JSON.parse(data);
		}
		callback();
	});
}

// resetConfig() erases the existing config.json and places a default
function resetConfig(callback) {
	config = getDefaultConfig();
	saveConfig();
	callback();
}

// init(), called at $(window).ready, initalizes the view
function init() {
	loadConfig(function() {
		adjustHighResZoom();
		Plugins.init(config);
	});
}

// call init and start the UI
init();

// before closing the UI, save the config as is
window.onbeforeunload = saveConfig;
